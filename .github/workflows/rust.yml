name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Cache Cargo
      id: cache-cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-1
    - name: Install wasm32
      uses: actions-rs/toolchain@v1
      with:
        toolchain: 1.66.0
        target: wasm32-unknown-unknown
        override: true
    - name: Install Cargo modules
      if: steps.cache-cargo.outputs.cache-hit != 'true'
      run: cargo install trunk clippy clippy-sarif sarif-fmt
    - name: Checkout
      uses: actions/checkout@v3
    - name: Cache Target
      uses: actions/cache@v3
      with:
        path: |
          backend-impl/target/
          backend-artifact/target/
          yew-app/target/

        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build Backend
      working-directory: backend-impl
      run: cargo build --release
    - name: Run rust-clippy on Backend
      working-directory: backend-impl
      run:
        cargo clippy
        --all-features
        --message-format=json > ../clippy-out
      continue-on-error: true
    - name: Run tests on Backend
      working-directory: backend-impl
      run: cargo test --release

    - name: Build Frontend
      working-directory: yew-app
      env:
        TERM: ansi
      run: trunk build --release
    - name: Run rust-clippy on Frontend
      working-directory: yew-app
      run:
        cargo clippy
        --all-features
        --message-format=json > ../clippy-out
      continue-on-error: true

    - name: Build Deploy Artifact
      working-directory: backend-artifact
      run: cargo build --release
    - name: Run rust-clippy on Deploy Artifact
      working-directory: backend-artifact
      run:
        cargo clippy
        --all-features
        --message-format=json  > ../clippy-out
      continue-on-error: true
    - name: Run tests on Deploy Artifact
      working-directory: backend-artifact
      run: cargo test --release

    - name: Collect all clippy results
      run: clippy-sarif clippy-out | sarif-fmt >rust-clippy-results.sarif
    - name: Upload analysis results to GitHub
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: rust-clippy-results.sarif
        wait-for-processing: true

    - name: Create Docker file
      uses: docker/build-push-action@v3
      with:
        context: .