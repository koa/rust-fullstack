name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  TERM: ansi

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable]
    steps:
    - name: Cache Cargo
      id: cache-cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}
    - name: Install wasm32
      uses:  hecrj/setup-rust-action@v2
      with:
        rust-version: ${{ matrix.rust }}
        targets: wasm32-unknown-unknown
        components: clippy
    - name: Install Cargo modules
      run: cargo install trunk clippy-sarif sarif-fmt
    - name: Checkout
      uses: actions/checkout@v4
    - name: Cache Target
      uses: actions/cache@v3
      with:
        path: |
          target/

        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ matrix.rust }}

    - name: Build Frontend
      working-directory: yew-app
      run: trunk build --release

    - name: Run rust-clippy
      run:
        cargo clippy
        --all-features
        --message-format=json |clippy-sarif | tee rust-clippy-results.sarif | sarif-fmt
      continue-on-error: true
    - name: Upload analysis results to GitHub
      uses: github/codeql-action/upload-sarif@v2
      continue-on-error: true
      with:
        sarif_file: rust-clippy-results.sarif
        wait-for-processing: true

    - name: Run tests
      run:
        cargo test --all-features

    - name: Build Deploy Artifact
      run: cargo build -p backend-artifact --release

    - name: Create Docker file
      uses: docker/build-push-action@v5
      with:
        context: .